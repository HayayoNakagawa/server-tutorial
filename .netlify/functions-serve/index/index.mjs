
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/index.mjs
var functions_default = async (req) => {
  const url = new URL(req.url);
  const name = url.searchParams.get("name") || "Bob";
  const unitSystem = url.searchParams.get("unitSystem") || "us";
  const xItems = ["Willy the Goblin", "Big Daddy", "Father Christmas"];
  const yItems = ["the soup kitchen", "Disneyland", "the White House"];
  const zItems = [
    "spontaneously combusted",
    "melted into a puddle on the sidewalk",
    "turned into a slug and crawled away"
  ];
  const randomValueFromArray = (array) => array[Math.floor(Math.random() * array.length)];
  const xItem = randomValueFromArray(xItems);
  const yItem = randomValueFromArray(yItems);
  const zItem = randomValueFromArray(zItems);
  const initialTemperature = 94;
  const initialWeight = 300;
  let temperature = initialTemperature;
  let weight = initialWeight;
  let tempType = "fahrenheit";
  let weightType = "pounds";
  if (unitSystem === "uk") {
    temperature = Math.round((initialTemperature - 32) * (5 / 9));
    weight = Math.round(initialWeight / 14);
    tempType = "celsius";
    weightType = "stone";
  }
  const story = `It was ${temperature} ${tempType} outside, so ${xItem} went for a walk. When they got to ${yItem}, they stared in horror for a few moments, then ${zItem}. ${name} saw the whole thing, but was not surprised \u2014 ${xItem} weighs ${weight} ${weightType}, and it was a hot day.`;
  return new Response(JSON.stringify({ message: story }), {
    headers: { "Content-Type": "application/json" }
  });
};
export {
  functions_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibmV0bGlmeS9mdW5jdGlvbnMvaW5kZXgubWpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBhc3luYyAocmVxKSA9PiB7XHJcbiAgICAvLyBcdTMwQUZcdTMwQThcdTMwRUFcdTMwRDFcdTMwRTlcdTMwRTFcdTMwRkNcdTMwQkZcdTMwOTJcdTUzRDZcdTVGOTdcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxLnVybCk7XHJcbiAgICBjb25zdCBuYW1lID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ25hbWUnKSB8fCAnQm9iJztcclxuICAgIGNvbnN0IHVuaXRTeXN0ZW0gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndW5pdFN5c3RlbScpIHx8ICd1cyc7XHJcbiAgXHJcbiAgICAvLyBcdTMwQjlcdTMwQzhcdTMwRkNcdTMwRUFcdTMwRkNcdTc1MUZcdTYyMTBcdTc1MjhcdTMwNkVcdTMwQzdcdTMwRkNcdTMwQkZcclxuICAgIGNvbnN0IHhJdGVtcyA9IFtcIldpbGx5IHRoZSBHb2JsaW5cIiwgXCJCaWcgRGFkZHlcIiwgXCJGYXRoZXIgQ2hyaXN0bWFzXCJdO1xyXG4gICAgY29uc3QgeUl0ZW1zID0gW1widGhlIHNvdXAga2l0Y2hlblwiLCBcIkRpc25leWxhbmRcIiwgXCJ0aGUgV2hpdGUgSG91c2VcIl07XHJcbiAgICBjb25zdCB6SXRlbXMgPSBbXHJcbiAgICAgIFwic3BvbnRhbmVvdXNseSBjb21idXN0ZWRcIixcclxuICAgICAgXCJtZWx0ZWQgaW50byBhIHB1ZGRsZSBvbiB0aGUgc2lkZXdhbGtcIixcclxuICAgICAgXCJ0dXJuZWQgaW50byBhIHNsdWcgYW5kIGNyYXdsZWQgYXdheVwiXHJcbiAgICBdO1xyXG4gIFxyXG4gICAgLy8gXHUzMEU5XHUzMEYzXHUzMEMwXHUzMEUwXHUzMDZBXHU5MDc4XHU2MjlFXHUzMDkyXHU3NTFGXHU2MjEwXHJcbiAgICBjb25zdCByYW5kb21WYWx1ZUZyb21BcnJheSA9IChhcnJheSkgPT4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XHJcbiAgICBjb25zdCB4SXRlbSA9IHJhbmRvbVZhbHVlRnJvbUFycmF5KHhJdGVtcyk7XHJcbiAgICBjb25zdCB5SXRlbSA9IHJhbmRvbVZhbHVlRnJvbUFycmF5KHlJdGVtcyk7XHJcbiAgICBjb25zdCB6SXRlbSA9IHJhbmRvbVZhbHVlRnJvbUFycmF5KHpJdGVtcyk7XHJcbiAgXHJcbiAgICAvLyBcdTZFMjlcdTVFQTZcdTMwNjhcdTRGNTNcdTkxQ0RcdTMwNkVcdTUxRTZcdTc0MDZcclxuICAgIGNvbnN0IGluaXRpYWxUZW1wZXJhdHVyZSA9IDk0OyAvLyBcdTAwQjBGXHJcbiAgICBjb25zdCBpbml0aWFsV2VpZ2h0ID0gMzAwOyAvLyBcdTMwRERcdTMwRjNcdTMwQzlcclxuICAgIGxldCB0ZW1wZXJhdHVyZSA9IGluaXRpYWxUZW1wZXJhdHVyZTtcclxuICAgIGxldCB3ZWlnaHQgPSBpbml0aWFsV2VpZ2h0O1xyXG4gICAgbGV0IHRlbXBUeXBlID0gXCJmYWhyZW5oZWl0XCI7XHJcbiAgICBsZXQgd2VpZ2h0VHlwZSA9IFwicG91bmRzXCI7XHJcbiAgXHJcbiAgICBpZiAodW5pdFN5c3RlbSA9PT0gXCJ1a1wiKSB7XHJcbiAgICAgIHRlbXBlcmF0dXJlID0gTWF0aC5yb3VuZCgoaW5pdGlhbFRlbXBlcmF0dXJlIC0gMzIpICogKDUgLyA5KSk7IC8vIFx1NjQ0Mlx1NkMwRlxyXG4gICAgICB3ZWlnaHQgPSBNYXRoLnJvdW5kKGluaXRpYWxXZWlnaHQgLyAxNCk7IC8vIFx1MzBCOVx1MzBDOFx1MzBGQ1x1MzBGM1xyXG4gICAgICB0ZW1wVHlwZSA9IFwiY2Vsc2l1c1wiO1xyXG4gICAgICB3ZWlnaHRUeXBlID0gXCJzdG9uZVwiO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gXHUzMEI5XHUzMEM4XHUzMEZDXHUzMEVBXHUzMEZDXHU3NTFGXHU2MjEwXHJcbiAgICBjb25zdCBzdG9yeSA9IGBJdCB3YXMgJHt0ZW1wZXJhdHVyZX0gJHt0ZW1wVHlwZX0gb3V0c2lkZSwgc28gJHt4SXRlbX0gd2VudCBmb3IgYSB3YWxrLiBXaGVuIHRoZXkgZ290IHRvICR7eUl0ZW19LCB0aGV5IHN0YXJlZCBpbiBob3Jyb3IgZm9yIGEgZmV3IG1vbWVudHMsIHRoZW4gJHt6SXRlbX0uICR7bmFtZX0gc2F3IHRoZSB3aG9sZSB0aGluZywgYnV0IHdhcyBub3Qgc3VycHJpc2VkIFx1MjAxNCAke3hJdGVtfSB3ZWlnaHMgJHt3ZWlnaHR9ICR7d2VpZ2h0VHlwZX0sIGFuZCBpdCB3YXMgYSBob3QgZGF5LmA7XHJcbiAgXHJcbiAgICAvLyBKU09OXHU1RjYyXHU1RjBGXHUzMDY3XHU4RkQ0XHUzMDU5XHJcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogc3RvcnkgfSksIHtcclxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgfSk7XHJcbiAgfTtcclxuICAiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7O0FBQUEsSUFBTyxvQkFBUSxPQUFPLFFBQVE7QUFFMUIsUUFBTSxNQUFNLElBQUksSUFBSSxJQUFJLEdBQUc7QUFDM0IsUUFBTSxPQUFPLElBQUksYUFBYSxJQUFJLE1BQU0sS0FBSztBQUM3QyxRQUFNLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxLQUFLO0FBR3pELFFBQU0sU0FBUyxDQUFDLG9CQUFvQixhQUFhLGtCQUFrQjtBQUNuRSxRQUFNLFNBQVMsQ0FBQyxvQkFBb0IsY0FBYyxpQkFBaUI7QUFDbkUsUUFBTSxTQUFTO0FBQUEsSUFDYjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRjtBQUdBLFFBQU0sdUJBQXVCLENBQUMsVUFBVSxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN0RixRQUFNLFFBQVEscUJBQXFCLE1BQU07QUFDekMsUUFBTSxRQUFRLHFCQUFxQixNQUFNO0FBQ3pDLFFBQU0sUUFBUSxxQkFBcUIsTUFBTTtBQUd6QyxRQUFNLHFCQUFxQjtBQUMzQixRQUFNLGdCQUFnQjtBQUN0QixNQUFJLGNBQWM7QUFDbEIsTUFBSSxTQUFTO0FBQ2IsTUFBSSxXQUFXO0FBQ2YsTUFBSSxhQUFhO0FBRWpCLE1BQUksZUFBZSxNQUFNO0FBQ3ZCLGtCQUFjLEtBQUssT0FBTyxxQkFBcUIsT0FBTyxJQUFJLEVBQUU7QUFDNUQsYUFBUyxLQUFLLE1BQU0sZ0JBQWdCLEVBQUU7QUFDdEMsZUFBVztBQUNYLGlCQUFhO0FBQUEsRUFDZjtBQUdBLFFBQU0sUUFBUSxVQUFVLFdBQVcsSUFBSSxRQUFRLGdCQUFnQixLQUFLLHNDQUFzQyxLQUFLLG1EQUFtRCxLQUFLLEtBQUssSUFBSSxzREFBaUQsS0FBSyxXQUFXLE1BQU0sSUFBSSxVQUFVO0FBR3JRLFNBQU8sSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFLFNBQVMsTUFBTSxDQUFDLEdBQUc7QUFBQSxJQUN0RCxTQUFTLEVBQUUsZ0JBQWdCLG1CQUFtQjtBQUFBLEVBQ2hELENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFtdCn0K
